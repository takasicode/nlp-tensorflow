# -*- coding: utf-8 -*-
"""NPL_Tensorflow.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zpp94JYo337vQNcSkYImh9ZaLybu6J8T

# Proyek Pertama : Membuat Model NLP dengan TensorFlow
Nama Lengkap : Muhammad Fadhil Abyansyah

Username : fadhil-abyansyah

Email : infofadhil29@gmail.com


---

Mengimpor library pandas
"""

import pandas as pd

"""Membaca file CSV menggunakan pandas"""

df = pd.read_csv('news.csv')

"""Menampilkan 5 baris pertama data"""

df.head()

"""Mengubah nama kolom"""

df.rename(columns={'Unnamed: 0': 'id','news_headline': 'headline','news_article': 'article','news_category':'category'}, inplace=True)

"""Menampilkan 5 baris pertama data"""

df.head()

"""Menampilkan jumlah kolom dan baris"""

df.shape

"""Mengonversi kategori berita menjadi one-hot encoding"""

categories = pd.get_dummies(df.category)
df_baru = pd.concat([df, categories], axis=1)
df_baru = df_baru.drop(columns='category')
df_baru

"""Menghapus kolom yang tidak diperlukan"""

df = df.drop(['id', 'headline'], axis=1)

"""Menampilkan 5 baris pertama data"""

df.head()

"""Memisahkan artikel dan label"""

articles = df_baru['article'].values
label = df_baru[['automobile', 'entertainment', 'politics', 'science', 'sports','technology','world' ]].values

"""Memisahkan data latih dan data uji"""

from sklearn.model_selection import train_test_split
articles_latih, articles_test, label_latih, label_test = train_test_split(articles, label, test_size = 0.2 )

"""Tokenisasi teks menggunakan TensorFlow"""

from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences

tokenizer = Tokenizer(num_words=5000, oov_token='x')
tokenizer.fit_on_texts(articles_latih)
tokenizer.fit_on_texts(articles_test)

sekuens_latih = tokenizer.texts_to_sequences(articles_latih)
sekuens_test = tokenizer.texts_to_sequences(articles_test)

padded_latih = pad_sequences(sekuens_latih)
padded_test = pad_sequences(sekuens_test)

"""Mengimpor TensorFlow"""

import tensorflow as tf

"""Membangun model menggunakan TensorFlow"""

model = tf.keras.Sequential([
    tf.keras.layers.Embedding(input_dim = 5000, output_dim=16),
    tf.keras.layers.LSTM(64),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(7, activation='softmax')
])

"""Mengompilasi model"""

model.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])
model.summary()

"""Mendefinisikan callback untuk menghentikan training saat akurasi mencapai 90%"""

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('val_accuracy') > 0.90):
      print('\nAkurasi telah mencapai 90%')
      self.model.stop_training = True

callbacks = myCallback()

"""Melatih model"""

num_epochs = 30

history = model.fit(
    padded_latih,
    label_latih,
    epochs=num_epochs,
    validation_data=(padded_test, label_test),
    verbose=2,
    callbacks=[callbacks])

"""Mengimpor Matplotlib"""

import matplotlib.pyplot as plt

"""Menampilkan grafik akurasi"""

plt.figure(figsize=(8,8))
plt.plot(history.history['accuracy'], label='train_accuracy')
plt.plot(history.history['val_accuracy'], label='validation_accuracy')
plt.title('Model Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.ylim(ymin=0, ymax=1)
plt.show()

"""Menampilkan grafik loss"""

plt.figure(figsize=(8,8))
plt.plot(history.history['loss'], label='train_loss')
plt.plot(history.history['val_loss'], label='validation_loss')
plt.title('Model Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.ylim(ymin=0)
plt.show()